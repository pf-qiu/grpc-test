// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace fileserver {

class FileServer final {
 public:
  static constexpr char const* service_full_name() {
    return "fileserver.FileServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fileserver::FilePath>> ListFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fileserver::FilePath>>(ListFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FilePath>> AsyncListFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FilePath>>(AsyncListFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FilePath>> PrepareAsyncListFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FilePath>>(PrepareAsyncListFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fileserver::FileData>> DownloadFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fileserver::FileData>>(DownloadFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FileData>> AsyncDownloadFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FileData>>(AsyncDownloadFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FileData>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fileserver::FileData>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::fileserver::FilePath>* ListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fileserver::FilePath>* AsyncListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fileserver::FilePath>* PrepareAsyncListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::fileserver::FileData>* DownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fileserver::FileData>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fileserver::FileData>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::fileserver::FilePath>> ListFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fileserver::FilePath>>(ListFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FilePath>> AsyncListFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FilePath>>(AsyncListFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FilePath>> PrepareAsyncListFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FilePath>>(PrepareAsyncListFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::fileserver::FileData>> DownloadFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fileserver::FileData>>(DownloadFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FileData>> AsyncDownloadFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FileData>>(AsyncDownloadFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FileData>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fileserver::FileData>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::fileserver::FilePath>* ListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request) override;
    ::grpc::ClientAsyncReader< ::fileserver::FilePath>* AsyncListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fileserver::FilePath>* PrepareAsyncListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::fileserver::FileData>* DownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request) override;
    ::grpc::ClientAsyncReader< ::fileserver::FileData>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fileserver::FileData>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FilePath>* writer);
    virtual ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FileData>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FilePath>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFile(::grpc::ServerContext* context, ::fileserver::FilePath* request, ::grpc::ServerAsyncWriter< ::fileserver::FilePath>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DownloadFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FileData>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::fileserver::FilePath* request, ::grpc::ServerAsyncWriter< ::fileserver::FileData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListFile<WithAsyncMethod_DownloadFile<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FilePath>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DownloadFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FileData>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FilePath>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DownloadFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FileData>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::fileserver::FilePath, ::fileserver::FilePath>(std::bind(&WithSplitStreamingMethod_ListFile<BaseClass>::StreamedListFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FilePath>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fileserver::FilePath,::fileserver::FilePath>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_DownloadFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::fileserver::FilePath, ::fileserver::FileData>(std::bind(&WithSplitStreamingMethod_DownloadFile<BaseClass>::StreamedDownloadFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FileData>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fileserver::FilePath,::fileserver::FileData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListFile<WithSplitStreamingMethod_DownloadFile<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListFile<WithSplitStreamingMethod_DownloadFile<Service > > StreamedService;
};

}  // namespace fileserver


#endif  // GRPC_server_2eproto__INCLUDED
