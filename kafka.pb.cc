// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kafka.proto

#include "kafka.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_kafka_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_kafka_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyValueData;
}  // namespace protobuf_kafka_2eproto
namespace KafkaConsumerServer {
class ConsumerJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConsumerJob>
      _instance;
} _ConsumerJob_default_instance_;
class JobIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobID>
      _instance;
} _JobID_default_instance_;
class KeyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyMessage>
      _instance;
} _KeyMessage_default_instance_;
class ValueMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValueMessage>
      _instance;
} _ValueMessage_default_instance_;
class KeyValueDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyValueData>
      _instance;
} _KeyValueData_default_instance_;
class KafkaMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KafkaMessage>
      _instance;
} _KafkaMessage_default_instance_;
class BatchInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchInfo>
      _instance;
} _BatchInfo_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty>
      _instance;
} _Empty_default_instance_;
}  // namespace KafkaConsumerServer
namespace protobuf_kafka_2eproto {
static void InitDefaultsConsumerJob() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_ConsumerJob_default_instance_;
    new (ptr) ::KafkaConsumerServer::ConsumerJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::ConsumerJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConsumerJob =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConsumerJob}, {}};

static void InitDefaultsJobID() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_JobID_default_instance_;
    new (ptr) ::KafkaConsumerServer::JobID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::JobID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JobID =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJobID}, {}};

static void InitDefaultsKeyMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_KeyMessage_default_instance_;
    new (ptr) ::KafkaConsumerServer::KeyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::KeyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyMessage}, {}};

static void InitDefaultsValueMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_ValueMessage_default_instance_;
    new (ptr) ::KafkaConsumerServer::ValueMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::ValueMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ValueMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValueMessage}, {}};

static void InitDefaultsKeyValueData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_KeyValueData_default_instance_;
    new (ptr) ::KafkaConsumerServer::KeyValueData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::KeyValueData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyValueData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyValueData}, {}};

static void InitDefaultsKafkaMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_KafkaMessage_default_instance_;
    new (ptr) ::KafkaConsumerServer::KafkaMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::KafkaMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KafkaMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKafkaMessage}, {
      &protobuf_kafka_2eproto::scc_info_KeyValueData.base,}};

static void InitDefaultsBatchInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_BatchInfo_default_instance_;
    new (ptr) ::KafkaConsumerServer::BatchInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::BatchInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BatchInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatchInfo}, {}};

static void InitDefaultsEmpty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KafkaConsumerServer::_Empty_default_instance_;
    new (ptr) ::KafkaConsumerServer::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KafkaConsumerServer::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConsumerJob.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobID.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ValueMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyValueData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KafkaMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Empty.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, partitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, batchinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, batchsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ConsumerJob, format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::JobID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::JobID, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KeyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KeyMessage, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::ValueMessage, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KeyValueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KeyValueData, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KeyValueData, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KafkaMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::KafkaMessage, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::BatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::BatchInfo, lastoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::BatchInfo, eof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::BatchInfo, errorcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::BatchInfo, errormessage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KafkaConsumerServer::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KafkaConsumerServer::ConsumerJob)},
  { 13, -1, sizeof(::KafkaConsumerServer::JobID)},
  { 19, -1, sizeof(::KafkaConsumerServer::KeyMessage)},
  { 25, -1, sizeof(::KafkaConsumerServer::ValueMessage)},
  { 31, -1, sizeof(::KafkaConsumerServer::KeyValueData)},
  { 38, -1, sizeof(::KafkaConsumerServer::KafkaMessage)},
  { 44, -1, sizeof(::KafkaConsumerServer::BatchInfo)},
  { 53, -1, sizeof(::KafkaConsumerServer::Empty)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_ConsumerJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_JobID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_KeyMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_ValueMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_KeyValueData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_KafkaMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_BatchInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KafkaConsumerServer::_Empty_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "kafka.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013kafka.proto\022\023KafkaConsumerServer\"\241\001\n\013C"
      "onsumerJob\022\r\n\005Topic\030\001 \001(\t\022\017\n\007Brokers\030\002 \001"
      "(\t\022\023\n\013PartitionID\030\003 \001(\005\022\016\n\006Offset\030\004 \001(\003\022"
      "\025\n\rBatchInterval\030\005 \001(\005\022\021\n\tBatchSize\030\006 \001("
      "\005\022\023\n\013Destination\030\007 \001(\t\022\016\n\006Format\030\010 \001(\t\"\023"
      "\n\005JobID\022\n\n\002ID\030\001 \001(\t\"\032\n\nKeyMessage\022\014\n\004Dat"
      "a\030\001 \003(\014\"\034\n\014ValueMessage\022\014\n\004Data\030\001 \003(\014\"*\n"
      "\014KeyValueData\022\013\n\003Key\030\001 \001(\014\022\r\n\005Value\030\002 \001("
      "\014\"\?\n\014KafkaMessage\022/\n\004Data\030\001 \003(\0132!.KafkaC"
      "onsumerServer.KeyValueData\"U\n\tBatchInfo\022"
      "\022\n\nLastOffset\030\001 \001(\003\022\013\n\003EOF\030\002 \001(\010\022\021\n\tErro"
      "rCode\030\003 \001(\005\022\024\n\014ErrorMessage\030\004 \001(\t\"\007\n\005Emp"
      "ty2\324\003\n\005Kafka\022H\n\006AddJob\022 .KafkaConsumerSe"
      "rver.ConsumerJob\032\032.KafkaConsumerServer.J"
      "obID\"\000\022E\n\tDeleteJob\022\032.KafkaConsumerServe"
      "r.JobID\032\032.KafkaConsumerServer.Empty\"\000\022J\n"
      "\007ReadKey\022\032.KafkaConsumerServer.JobID\032\037.K"
      "afkaConsumerServer.KeyMessage\"\0000\001\022N\n\tRea"
      "dValue\022\032.KafkaConsumerServer.JobID\032!.Kaf"
      "kaConsumerServer.ValueMessage\"\0000\001\022P\n\013Rea"
      "dMessage\022\032.KafkaConsumerServer.JobID\032!.K"
      "afkaConsumerServer.KafkaMessage\"\0000\001\022L\n\014G"
      "etBatchInfo\022\032.KafkaConsumerServer.JobID\032"
      "\036.KafkaConsumerServer.BatchInfo\"\000b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kafka.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_kafka_2eproto
namespace KafkaConsumerServer {

// ===================================================================

void ConsumerJob::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsumerJob::kTopicFieldNumber;
const int ConsumerJob::kBrokersFieldNumber;
const int ConsumerJob::kPartitionIDFieldNumber;
const int ConsumerJob::kOffsetFieldNumber;
const int ConsumerJob::kBatchIntervalFieldNumber;
const int ConsumerJob::kBatchSizeFieldNumber;
const int ConsumerJob::kDestinationFieldNumber;
const int ConsumerJob::kFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsumerJob::ConsumerJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_ConsumerJob.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.ConsumerJob)
}
ConsumerJob::ConsumerJob(const ConsumerJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brokers().size() > 0) {
    brokers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokers_);
  }
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&batchsize_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(batchsize_));
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.ConsumerJob)
}

void ConsumerJob::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batchsize_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(batchsize_));
}

ConsumerJob::~ConsumerJob() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.ConsumerJob)
  SharedDtor();
}

void ConsumerJob::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConsumerJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConsumerJob::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConsumerJob& ConsumerJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_ConsumerJob.base);
  return *internal_default_instance();
}


void ConsumerJob::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.ConsumerJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batchsize_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(batchsize_));
  _internal_metadata_.Clear();
}

bool ConsumerJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.ConsumerJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KafkaConsumerServer.ConsumerJob.Topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Brokers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokers().data(), static_cast<int>(this->brokers().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KafkaConsumerServer.ConsumerJob.Brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PartitionID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BatchInterval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BatchSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Destination = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KafkaConsumerServer.ConsumerJob.Destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Format = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KafkaConsumerServer.ConsumerJob.Format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.ConsumerJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.ConsumerJob)
  return false;
#undef DO_
}

void ConsumerJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.ConsumerJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // string Brokers = 2;
  if (this->brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokers().data(), static_cast<int>(this->brokers().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokers(), output);
  }

  // int32 PartitionID = 3;
  if (this->partitionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partitionid(), output);
  }

  // int64 Offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  // int32 BatchInterval = 5;
  if (this->batchinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->batchinterval(), output);
  }

  // int32 BatchSize = 6;
  if (this->batchsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->batchsize(), output);
  }

  // string Destination = 7;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->destination(), output);
  }

  // string Format = 8;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.ConsumerJob)
}

::google::protobuf::uint8* ConsumerJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.ConsumerJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // string Brokers = 2;
  if (this->brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokers().data(), static_cast<int>(this->brokers().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokers(), target);
  }

  // int32 PartitionID = 3;
  if (this->partitionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partitionid(), target);
  }

  // int64 Offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  // int32 BatchInterval = 5;
  if (this->batchinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->batchinterval(), target);
  }

  // int32 BatchSize = 6;
  if (this->batchsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->batchsize(), target);
  }

  // string Destination = 7;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->destination(), target);
  }

  // string Format = 8;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.ConsumerJob.Format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->format(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.ConsumerJob)
  return target;
}

size_t ConsumerJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.ConsumerJob)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string Brokers = 2;
  if (this->brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokers());
  }

  // string Destination = 7;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string Format = 8;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  // int64 Offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int32 PartitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());
  }

  // int32 BatchInterval = 5;
  if (this->batchinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batchinterval());
  }

  // int32 BatchSize = 6;
  if (this->batchsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batchsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsumerJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.ConsumerJob)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumerJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsumerJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.ConsumerJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.ConsumerJob)
    MergeFrom(*source);
  }
}

void ConsumerJob::MergeFrom(const ConsumerJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.ConsumerJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.brokers().size() > 0) {

    brokers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokers_);
  }
  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.partitionid() != 0) {
    set_partitionid(from.partitionid());
  }
  if (from.batchinterval() != 0) {
    set_batchinterval(from.batchinterval());
  }
  if (from.batchsize() != 0) {
    set_batchsize(from.batchsize());
  }
}

void ConsumerJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.ConsumerJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumerJob::CopyFrom(const ConsumerJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.ConsumerJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumerJob::IsInitialized() const {
  return true;
}

void ConsumerJob::Swap(ConsumerJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsumerJob::InternalSwap(ConsumerJob* other) {
  using std::swap;
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brokers_.Swap(&other->brokers_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(partitionid_, other->partitionid_);
  swap(batchinterval_, other->batchinterval_);
  swap(batchsize_, other->batchsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConsumerJob::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JobID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobID::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobID::JobID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_JobID.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.JobID)
}
JobID::JobID(const JobID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.JobID)
}

void JobID::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JobID::~JobID() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.JobID)
  SharedDtor();
}

void JobID::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JobID::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobID& JobID::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_JobID.base);
  return *internal_default_instance();
}


void JobID::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.JobID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JobID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.JobID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KafkaConsumerServer.JobID.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.JobID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.JobID)
  return false;
#undef DO_
}

void JobID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.JobID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.JobID.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.JobID)
}

::google::protobuf::uint8* JobID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.JobID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.JobID.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.JobID)
  return target;
}

size_t JobID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.JobID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.JobID)
  GOOGLE_DCHECK_NE(&from, this);
  const JobID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.JobID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.JobID)
    MergeFrom(*source);
  }
}

void JobID::MergeFrom(const JobID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.JobID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void JobID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.JobID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobID::CopyFrom(const JobID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.JobID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobID::IsInitialized() const {
  return true;
}

void JobID::Swap(JobID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobID::InternalSwap(JobID* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JobID::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyMessage::KeyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_KeyMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.KeyMessage)
}
KeyMessage::KeyMessage(const KeyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.KeyMessage)
}

void KeyMessage::SharedCtor() {
}

KeyMessage::~KeyMessage() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.KeyMessage)
  SharedDtor();
}

void KeyMessage::SharedDtor() {
}

void KeyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyMessage::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyMessage& KeyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_KeyMessage.base);
  return *internal_default_instance();
}


void KeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.KeyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

bool KeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.KeyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.KeyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.KeyMessage)
  return false;
#undef DO_
}

void KeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.KeyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes Data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.KeyMessage)
}

::google::protobuf::uint8* KeyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.KeyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes Data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.KeyMessage)
  return target;
}

size_t KeyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.KeyMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes Data = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.KeyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.KeyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.KeyMessage)
    MergeFrom(*source);
  }
}

void KeyMessage::MergeFrom(const KeyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.KeyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void KeyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.KeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyMessage::CopyFrom(const KeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.KeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyMessage::IsInitialized() const {
  return true;
}

void KeyMessage::Swap(KeyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyMessage::InternalSwap(KeyMessage* other) {
  using std::swap;
  data_.InternalSwap(CastToBase(&other->data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyMessage::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ValueMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueMessage::ValueMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_ValueMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.ValueMessage)
}
ValueMessage::ValueMessage(const ValueMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.ValueMessage)
}

void ValueMessage::SharedCtor() {
}

ValueMessage::~ValueMessage() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.ValueMessage)
  SharedDtor();
}

void ValueMessage::SharedDtor() {
}

void ValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ValueMessage::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ValueMessage& ValueMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_ValueMessage.base);
  return *internal_default_instance();
}


void ValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.ValueMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

bool ValueMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.ValueMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.ValueMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.ValueMessage)
  return false;
#undef DO_
}

void ValueMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.ValueMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes Data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.ValueMessage)
}

::google::protobuf::uint8* ValueMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.ValueMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes Data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.ValueMessage)
  return target;
}

size_t ValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.ValueMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes Data = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.ValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.ValueMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.ValueMessage)
    MergeFrom(*source);
  }
}

void ValueMessage::MergeFrom(const ValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.ValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ValueMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.ValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueMessage::CopyFrom(const ValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.ValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueMessage::IsInitialized() const {
  return true;
}

void ValueMessage::Swap(ValueMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueMessage::InternalSwap(ValueMessage* other) {
  using std::swap;
  data_.InternalSwap(CastToBase(&other->data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ValueMessage::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyValueData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValueData::kKeyFieldNumber;
const int KeyValueData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValueData::KeyValueData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_KeyValueData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.KeyValueData)
}
KeyValueData::KeyValueData(const KeyValueData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.KeyValueData)
}

void KeyValueData::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyValueData::~KeyValueData() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.KeyValueData)
  SharedDtor();
}

void KeyValueData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValueData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyValueData::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValueData& KeyValueData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_KeyValueData.base);
  return *internal_default_instance();
}


void KeyValueData::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.KeyValueData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KeyValueData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.KeyValueData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.KeyValueData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.KeyValueData)
  return false;
#undef DO_
}

void KeyValueData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.KeyValueData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.KeyValueData)
}

::google::protobuf::uint8* KeyValueData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.KeyValueData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.KeyValueData)
  return target;
}

size_t KeyValueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.KeyValueData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValueData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.KeyValueData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValueData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValueData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.KeyValueData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.KeyValueData)
    MergeFrom(*source);
  }
}

void KeyValueData::MergeFrom(const KeyValueData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.KeyValueData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValueData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.KeyValueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueData::CopyFrom(const KeyValueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.KeyValueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueData::IsInitialized() const {
  return true;
}

void KeyValueData::Swap(KeyValueData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValueData::InternalSwap(KeyValueData* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyValueData::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KafkaMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KafkaMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KafkaMessage::KafkaMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_KafkaMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.KafkaMessage)
}
KafkaMessage::KafkaMessage(const KafkaMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.KafkaMessage)
}

void KafkaMessage::SharedCtor() {
}

KafkaMessage::~KafkaMessage() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.KafkaMessage)
  SharedDtor();
}

void KafkaMessage::SharedDtor() {
}

void KafkaMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KafkaMessage::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KafkaMessage& KafkaMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_KafkaMessage.base);
  return *internal_default_instance();
}


void KafkaMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.KafkaMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

bool KafkaMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.KafkaMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KafkaConsumerServer.KeyValueData Data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.KafkaMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.KafkaMessage)
  return false;
#undef DO_
}

void KafkaMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.KafkaMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KafkaConsumerServer.KeyValueData Data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.KafkaMessage)
}

::google::protobuf::uint8* KafkaMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.KafkaMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KafkaConsumerServer.KeyValueData Data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.KafkaMessage)
  return target;
}

size_t KafkaMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.KafkaMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .KafkaConsumerServer.KeyValueData Data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KafkaMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.KafkaMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const KafkaMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KafkaMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.KafkaMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.KafkaMessage)
    MergeFrom(*source);
  }
}

void KafkaMessage::MergeFrom(const KafkaMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.KafkaMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void KafkaMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.KafkaMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KafkaMessage::CopyFrom(const KafkaMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.KafkaMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KafkaMessage::IsInitialized() const {
  return true;
}

void KafkaMessage::Swap(KafkaMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KafkaMessage::InternalSwap(KafkaMessage* other) {
  using std::swap;
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KafkaMessage::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatchInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchInfo::kLastOffsetFieldNumber;
const int BatchInfo::kEOFFieldNumber;
const int BatchInfo::kErrorCodeFieldNumber;
const int BatchInfo::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchInfo::BatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_BatchInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.BatchInfo)
}
BatchInfo::BatchInfo(const BatchInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  ::memcpy(&lastoffset_, &from.lastoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&lastoffset_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.BatchInfo)
}

void BatchInfo::SharedCtor() {
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lastoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&lastoffset_)) + sizeof(errorcode_));
}

BatchInfo::~BatchInfo() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.BatchInfo)
  SharedDtor();
}

void BatchInfo::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatchInfo::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchInfo& BatchInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_BatchInfo.base);
  return *internal_default_instance();
}


void BatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.BatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lastoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&lastoffset_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

bool BatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.BatchInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 LastOffset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool EOF = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ErrorCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ErrorMessage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KafkaConsumerServer.BatchInfo.ErrorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.BatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.BatchInfo)
  return false;
#undef DO_
}

void BatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.BatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 LastOffset = 1;
  if (this->lastoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lastoffset(), output);
  }

  // bool EOF = 2;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->eof(), output);
  }

  // int32 ErrorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // string ErrorMessage = 4;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.BatchInfo.ErrorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->errormessage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.BatchInfo)
}

::google::protobuf::uint8* BatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.BatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 LastOffset = 1;
  if (this->lastoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lastoffset(), target);
  }

  // bool EOF = 2;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->eof(), target);
  }

  // int32 ErrorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // string ErrorMessage = 4;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KafkaConsumerServer.BatchInfo.ErrorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errormessage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.BatchInfo)
  return target;
}

size_t BatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.BatchInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ErrorMessage = 4;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // int64 LastOffset = 1;
  if (this->lastoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastoffset());
  }

  // bool EOF = 2;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  // int32 ErrorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.BatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.BatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.BatchInfo)
    MergeFrom(*source);
  }
}

void BatchInfo::MergeFrom(const BatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.BatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.lastoffset() != 0) {
    set_lastoffset(from.lastoffset());
  }
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void BatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.BatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchInfo::CopyFrom(const BatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.BatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchInfo::IsInitialized() const {
  return true;
}

void BatchInfo::Swap(BatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchInfo::InternalSwap(BatchInfo* other) {
  using std::swap;
  errormessage_.Swap(&other->errormessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lastoffset_, other->lastoffset_);
  swap(eof_, other->eof_);
  swap(errorcode_, other->errorcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatchInfo::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kafka_2eproto::scc_info_Empty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KafkaConsumerServer.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KafkaConsumerServer.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:KafkaConsumerServer.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  ::protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kafka_2eproto::scc_info_Empty.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConsumerServer.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KafkaConsumerServer.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:KafkaConsumerServer.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KafkaConsumerServer.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KafkaConsumerServer.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KafkaConsumerServer.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConsumerServer.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConsumerServer.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KafkaConsumerServer.Empty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KafkaConsumerServer.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KafkaConsumerServer.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KafkaConsumerServer.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KafkaConsumerServer.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KafkaConsumerServer.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConsumerServer.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_kafka_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kafka_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KafkaConsumerServer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::ConsumerJob* Arena::CreateMaybeMessage< ::KafkaConsumerServer::ConsumerJob >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::ConsumerJob >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::JobID* Arena::CreateMaybeMessage< ::KafkaConsumerServer::JobID >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::JobID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::KeyMessage* Arena::CreateMaybeMessage< ::KafkaConsumerServer::KeyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::KeyMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::ValueMessage* Arena::CreateMaybeMessage< ::KafkaConsumerServer::ValueMessage >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::ValueMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::KeyValueData* Arena::CreateMaybeMessage< ::KafkaConsumerServer::KeyValueData >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::KeyValueData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::KafkaMessage* Arena::CreateMaybeMessage< ::KafkaConsumerServer::KafkaMessage >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::KafkaMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::BatchInfo* Arena::CreateMaybeMessage< ::KafkaConsumerServer::BatchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::BatchInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KafkaConsumerServer::Empty* Arena::CreateMaybeMessage< ::KafkaConsumerServer::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::KafkaConsumerServer::Empty >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
