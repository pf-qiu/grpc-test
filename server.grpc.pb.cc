// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fileserver {

static const char* FileServer_method_names[] = {
  "/fileserver.FileServer/ListFile",
  "/fileserver.FileServer/DownloadFile",
};

std::unique_ptr< FileServer::Stub> FileServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileServer::Stub> stub(new FileServer::Stub(channel));
  return stub;
}

FileServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListFile_(FileServer_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DownloadFile_(FileServer_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::fileserver::FilePath>* FileServer::Stub::ListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request) {
  return ::grpc::internal::ClientReaderFactory< ::fileserver::FilePath>::Create(channel_.get(), rpcmethod_ListFile_, context, request);
}

::grpc::ClientAsyncReader< ::fileserver::FilePath>* FileServer::Stub::AsyncListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fileserver::FilePath>::Create(channel_.get(), cq, rpcmethod_ListFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fileserver::FilePath>* FileServer::Stub::PrepareAsyncListFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fileserver::FilePath>::Create(channel_.get(), cq, rpcmethod_ListFile_, context, request, false, nullptr);
}

::grpc::ClientReader< ::fileserver::FileData>* FileServer::Stub::DownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request) {
  return ::grpc::internal::ClientReaderFactory< ::fileserver::FileData>::Create(channel_.get(), rpcmethod_DownloadFile_, context, request);
}

::grpc::ClientAsyncReader< ::fileserver::FileData>* FileServer::Stub::AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fileserver::FileData>::Create(channel_.get(), cq, rpcmethod_DownloadFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fileserver::FileData>* FileServer::Stub::PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::fileserver::FilePath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fileserver::FileData>::Create(channel_.get(), cq, rpcmethod_DownloadFile_, context, request, false, nullptr);
}

FileServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileServer::Service, ::fileserver::FilePath, ::fileserver::FilePath>(
          std::mem_fn(&FileServer::Service::ListFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileServer::Service, ::fileserver::FilePath, ::fileserver::FileData>(
          std::mem_fn(&FileServer::Service::DownloadFile), this)));
}

FileServer::Service::~Service() {
}

::grpc::Status FileServer::Service::ListFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FilePath>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileServer::Service::DownloadFile(::grpc::ServerContext* context, const ::fileserver::FilePath* request, ::grpc::ServerWriter< ::fileserver::FileData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fileserver

